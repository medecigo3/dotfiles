"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Loading Plugins (vundle)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" load plugins from vundle
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let vundle manage vundle
Plugin 'gmarik/vundle'

" utilities
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree' " file drawer, open with :NERDTreeToggle
Plugin 'benmills/vimux'
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'vim-airline/vim-airline' " fancy statusline (OP powerline)
Plugin 'vim-airline/vim-airline-themes' " themes for vim-airline
Plugin 'fholgado/minibufexpl.vim' " buffer explorer
" Plugin 'vim-ident-guides'
Plugin 'jcfaria/vim-r-plugin'
Plugin 'tcarette/vim-sparkshell'
Plugin 'airblade/vim-gitgutter'
Plugin 'ensime/ensime-vim' " ensime to be installed
Plugin 'majutsushi/tagbar'
Plugin 'myusuf3/numbers.vim'
Plugin 'ivanov/vim-ipython'
"Plugin 'davidhalter/jedi-vim' " overwrite shortcut ?
Plugin 'godlygeek/tabular'
" Collapsse //}}}???
Plugin 'luochen1990/rainbow'
" colorschemes
Plugin 'chriskempson/base16-vim'

" Languages
Plugin 'derekwyatt/vim-scala'
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'

call vundle#end()
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible " not compatible with vi
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos
let mapleader = ','

" Tab control
set expandtab " tabs ftw
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

set clipboard=unnamed

" faster redrawing
set ttyfast

" code folding settings
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

"cursor
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"
" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros

set magic " Set magic on, for regex

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink
set encoding=utf8

" Solarized
syntax on
set background=dark
let g:solarized_termcolors = 256

"colorscheme desert
if has("gui_running")
  colorscheme wombat
elseif &t_Co == 256
  colorscheme wombat256mod
endif

" line numbers
set number
:highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

set autoindent " automatically set indent of new line
set smartindent

set laststatus=2 " show the satus line all the time

" Mouse copy paste
set ttymouse=xterm2
set mouse=a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <leader>ev :e! ~/.vimrc<cr> " edit ~/.vimrc

map <leader>wc :wincmd q<cr>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk

" helpers for dealing with other people's code
nmap \t :set ts=4 sts=4 sw=4 noet<cr>
nmap \s :set ts=4 sts=4 sw=4 et<cr>

" Comment block of code
map <C-a> :call Comment()<CR>
map <C-b> :call Uncomment()<CR>

" Nerdtree
map <leader>n :NERDTreeToggle<cr>

" Tabular
:map "t= :Tab /=<CR>
:map "t< :Tab /<-<CR>
:map "t: :Tab /:<CR>
:map "t+ :Tab /+<CR>
:map "t( :Tab /(<CR>
:map "t) :Tab /)<CR>
:map "t# :Tab /#<CR>i

" Remap VIM 0 to first non-blank character
map 0 ^

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Format scala code
nmap <leader>m :SortScalaImports<CR>gggqG<C-o><C-o><leader><w>

" Replace word under cursor globally
nnoremap <Leader>a :%s/\<<C-r><C-w>\>/

" Replace word under cursor in line
nnoremap <Leader>s :s/\<<C-r><C-w>\>/

" minibufexpl
map <space>l :MBEbn<cr>
map <space>h :MBEbp<cr>
map <space><Left> :MBEbp<CR>
map <space><Right> :MBEbn<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

" Comment
" comment a block of code sh, rb,php,js,scala,py
function! Comment()
  let ext = tolower(expand('%:e'))
  if ext == 'php' || ext == 'rb' || ext == 'sh' || ext == 'py'
    silent s/^/\#/
  elseif ext == 'js' || ext == 'scala'
    silent s:^:\/\/:g
  elseif ext == 'vim'
    silent s:^:\":g
  endif
endfunction

function! Uncomment()
  let ext = tolower(expand('%:e'))
  if ext == 'php' || ext == 'rb' || ext == 'sh' || ext == 'py'
    silent s/^\#//
  elseif ext == 'js' || ext == 'scala'
    silent s:^\/\/::g
  elseif ext == 'vim'
    silent s:^\"::g
  endif
endfunction

" To enable shit arrow command in vim
if &term =~ '^screen'
  "tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

" colorcolumn / print margin
if version > 702
  set colorcolumn=120
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeMinimalUI=1

" CTRL-P
" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

let g:ctrlp_switch_buffer = 'E'
let g:ctrlp_tabpage_position = 'c'
let g:ctrlp_working_path_mode = 'rc'
let g:ctrlp_root_markers = ['.project.root']
let g:ctrlp_custom_ignore = '\v%(/\.%(git|hg|svn)|\.%(class|o|png|jpg|jpeg|bmp|tar|jar|tgz|deb|zip)$|/target/%(quickfix|resolution-cache|streams)|/target/scala-2.10/%(classes|test-classes|sbt-0.13|cache)|/project/target|/project/project)'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multiple_files = '1ri'
let g:ctrlp_match_window = 'max:40'
let g:ctrlp_prompt_mappings = {
      \ 'PrtSelectMove("j")':   ['<c-n>'],
      \ 'PrtSelectMove("k")':   ['<c-p>'],
      \ 'PrtHistory(-1)':       ['<c-j>', '<down>'],
      \ 'PrtHistory(1)':        ['<c-i>', '<up>']
      \ }
nmap ,fb :CtrlPBuffer<cr>
nmap ,ff :CtrlP .<cr>
nmap ,fF :execute ":CtrlP " . expand('%:p:h')<cr>
nmap ,fr :CtrlP<cr>
nmap ,fm :CtrlPMixed<cr>

" airline options
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='onedark'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#fnamemod = ':.'
let g:airline#extensions#tabline#fnamecollapse = 0

" minibufexpl
map <Leader>t :MBEToggle<cr>
let g:miniBufExplorerAutoStart = 0
let g:miniBufExplShowBufNumbers = 0
let g:miniBufExplBuffersNeeded = 0
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" Rainbow
let g:rainbow_active = 1

" Spark-shell
autocmd filetype scala,python noremap ,ss :call StartSparkShell(g:sparkOptions)<CR>
autocmd filetype scala,python noremap ,sk :call StopSparkShell()<CR>
autocmd filetype scala,python noremap ,sa :1,$ call SparkShellSendMultiLine()<CR>

autocmd filetype scala,python nnoremap ,l  :call SparkShellSendLine()<CR>
autocmd filetype scala,python nnoremap ,sp :call SparkShellEnterPasteEnv()<CR>
autocmd filetype scala,python nnoremap ,se :call SparkShellExitPasteEnv()<CR>
autocmd filetype scala,python nnoremap ,sc :call SparkShellSendKey("<C-R><C-W>.count()\r")<CR><Esc>
autocmd filetype scala        nnoremap ,st :call SparkShellSendKey("<C-R><C-W>.take(5).foreach(println)\r")<CR><Esc>
autocmd filetype       python nnoremap ,st :call SparkShellSendKey("for e in <C-R><C-W>.take(5) : print(e)\r\r")<CR><Esc>
autocmd filetype scala,python nnoremap ,so :call SparkShellSendKey("<C-R><C-W>\r")<CR><Esc>

" Spark-shell on data frames
autocmd filetype scala,python nnoremap ,sdt :call SparkShellSendKey("<C-R><C-W>.show()\r")<CR><Esc>
autocmd filetype scala,python nnoremap ,sds :call SparkShellSendKey("<C-R><C-W>.printSchema()\r")<CR><Esc>
autocmd filetype scala,python nnoremap ,sdd :call SparkShellSendKey("<C-R><C-W>.describe(<C-R><C-W>.columns:_*).show()\r")<CR><Esc>

autocmd filetype scala,python vnoremap ,so y:call SparkShellSendKey(substitute('<C-R>0',"\"","\\\"","")."\r")<CR>
autocmd filetype scala,python vnoremap ,l  :call SparkShellSendMultiLine() <CR>

" Scala
let g:scala_sort_across_groups=1

"vimux
let g:VimuxHeight = "40"

" Jedi
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0
